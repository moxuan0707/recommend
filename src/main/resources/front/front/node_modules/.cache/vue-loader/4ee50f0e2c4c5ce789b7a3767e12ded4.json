{"remainingRequest":"C:\\Users\\Administrator\\Downloads\\基于SSM框架的博物馆藏品展示系统研究与实现\\ssmg4ocf\\src\\main\\webapp\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Administrator\\Downloads\\基于SSM框架的博物馆藏品展示系统研究与实现\\ssmg4ocf\\src\\main\\webapp\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Downloads\\基于SSM框架的博物馆藏品展示系统研究与实现\\ssmg4ocf\\src\\main\\webapp\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Downloads\\基于SSM框架的博物馆藏品展示系统研究与实现\\ssmg4ocf\\src\\main\\webapp\\front\\src\\pages\\aboutus\\list.vue?vue&type=template&id=678896c6&scoped=true&","dependencies":[{"path":"C:\\Users\\Administrator\\Downloads\\基于SSM框架的博物馆藏品展示系统研究与实现\\ssmg4ocf\\src\\main\\webapp\\front\\src\\pages\\aboutus\\list.vue","mtime":1671759585000},{"path":"C:\\Users\\Administrator\\Downloads\\基于SSM框架的博物馆藏品展示系统研究与实现\\ssmg4ocf\\src\\main\\webapp\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Downloads\\基于SSM框架的博物馆藏品展示系统研究与实现\\ssmg4ocf\\src\\main\\webapp\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Downloads\\基于SSM框架的博物馆藏品展示系统研究与实现\\ssmg4ocf\\src\\main\\webapp\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Downloads\\基于SSM框架的博物馆藏品展示系统研究与实现\\ssmg4ocf\\src\\main\\webapp\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}